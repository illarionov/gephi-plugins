package fr.totetmatt.gephi.twitter.utils.listener.filtered;

/*
Copyright 2020 Twitter, Inc.
SPDX-License-Identifier: Apache-2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
https://openapi-generator.tech
Do not edit the class manually.
 */
import fr.totetmatt.gephi.twitter.utils.listener.TweetsStreamListener;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import com.twitter.clientlib.model.*;

import fr.totetmatt.gephi.twitter.utils.listener.ITweetsQueue;
import fr.totetmatt.gephi.twitter.utils.listener.LinkedListTweetsQueue;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.gephi.graph.api.Graph;
import org.gephi.graph.api.GraphController;
import org.gephi.graph.api.GraphModel;
import org.gephi.utils.progress.Progress;
import org.gephi.utils.progress.ProgressTicket;
import org.gephi.utils.progress.ProgressTicketProvider;

import org.openide.util.Exceptions;
import org.openide.util.Lookup;

public class TweetsStreamListenersExecutor {

    private ProgressTicket progressTicket;
    protected static final Logger logger = Logger.getLogger(TweetsStreamListenersExecutor.class.getName());
    private final ITweetsQueue<FilteredStreamingTweetResponse> tweetsQueue;
    private final List<TweetsStreamListener> listeners = new ArrayList<>();
    private final InputStream stream;
    private volatile boolean isRunning = true;
    private final Graph graph;

    private void initProgressTicket() {
        ProgressTicketProvider progressProvider = Lookup.getDefault().lookup(ProgressTicketProvider.class);
        progressTicket = progressProvider.createTicket("Twitter Streaming Importer V2 Running", () -> {
            shutdown();
            return true;
        });

    }

    public TweetsStreamListenersExecutor(InputStream stream, Graph graph) {
        this.tweetsQueue = new LinkedListTweetsQueue();
        this.stream = stream;
        this.graph = graph;
        initProgressTicket();
    }

    public TweetsStreamListenersExecutor(ITweetsQueue tweetsQueue, InputStream stream, Graph graph) {
        this.tweetsQueue = tweetsQueue;
        this.stream = stream;
        this.graph = graph;
    }

    public void addListener(TweetsStreamListener toAdd) {
        listeners.add(toAdd);
    }

    public void executeListeners() {
        if (stream == null) {
            logger.log(Level.SEVERE, "Error: stream is null.");
            return;
        } else if (this.tweetsQueue == null) {
            logger.log(Level.SEVERE, "Error: tweetsQueue is null.");
            return;
        }

        TweetsQueuer tweetsQueuer = new TweetsQueuer();
        TweetsListenersExecutor tweetsListenersExecutor = new TweetsListenersExecutor();
        tweetsListenersExecutor.start();
        tweetsQueuer.start();
    }

    public synchronized void shutdown() {
        isRunning = false;
        Progress.finish(progressTicket);
        logger.log(Level.SEVERE, "TweetsStreamListenersExecutor is shutting down.");
    }

    private class TweetsListenersExecutor extends Thread {
        private final GraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getGraphModel();
        @Override
        public void run() {

            Progress.start(progressTicket);
            Progress.switchToIndeterminate(progressTicket);
            this.setName("Twitter Streaming Importer v2 : TweetsListenersExecutor");
            processTweets();
        }

        private void processTweets() {
            FilteredStreamingTweetResponse streamingTweet;
            try {
                while (isRunning) {
                    graphModel.getGraph().writeLock(); 
                    /* Volontary lock here to be sure we can "flush" all the 
                     current entities to the graph.
                     Mainly avoid to have the creation being lagging behind if FA2 
                    is enabled.
                    */
                    while (tweetsQueue.getSize() != 0) {

                        streamingTweet = tweetsQueue.poll();

                        for (TweetsStreamListener listener : listeners) {
                            listener.actionOnTweetsStream(streamingTweet);
                        }
                    }
                    graphModel.getGraph().writeUnlock();
                 
                }
            } catch (Exception e) {
                Exceptions.printStackTrace(e);
                graph.writeUnlock();
            }
        }

    }

    private class TweetsQueuer extends Thread {

        @Override
        public void run() {
            this.setName("Twitter Streaming Importer v2 : TweetsQueuer");
            queueTweets();
        }

        private void queueTweets() {
            String line;
            
            try ( BufferedReader reader = new BufferedReader(new InputStreamReader(stream, "UTF-8"))) {
                while (isRunning) {
                    line = reader.readLine();
                    if (line == null || line.isEmpty()) {
                        //Thread.sleep(100);
                        continue;
                    }
                    try {
                        tweetsQueue.add(FilteredStreamingTweetResponse.fromJson(line));
                    } catch (IOException e) {
                        Exceptions.printStackTrace(e);
                    }
                }
            } catch (Exception e) {
                Exceptions.printStackTrace(e);
            }
        }
    }
}
