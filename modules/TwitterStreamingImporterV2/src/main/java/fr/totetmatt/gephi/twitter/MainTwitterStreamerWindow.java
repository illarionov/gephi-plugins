/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package fr.totetmatt.gephi.twitter;

import com.twitter.clientlib.ApiException;
import fr.totetmatt.gephi.twitter.networklogics.Networklogic;
import java.awt.Desktop;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import javax.swing.DefaultComboBoxModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author totetmatt
 */
@ConvertAsProperties(dtd = "-//org.gephi.plugins.example.panel//Simple//EN",
        autostore = false)
@TopComponent.Description(preferredID = "MainTwitterStreamerWindow",
        iconBase = "fr/totetmatt/gephi/twitter/twitterlogo.png"
)
@TopComponent.Registration(mode = "layoutmode", openAtStartup = true)
@ActionID(category = "Window", id = "org.gephi.plugins.twitter.panel.MainTwitterStreamerWindow")
@ActionReference(path = "Menu/Window", position = 333)
@TopComponent.OpenActionRegistration(displayName = "#CTL_SimpleAction",
        preferredID = "MainTwitterStreamerWindow")
public class MainTwitterStreamerWindow extends TopComponent {

    private final TwitterStreamerV2 streamer;

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void refreshRules() throws ApiException {

        this.streamer.refreshRules();

        if (this.streamer.getRules() != null) {
            this.tableRules.setModel(new RuleTableModel(streamer.getRules()));
        } else {
            this.tableRules.setModel(new RuleTableModel());
        }
    }

    /**
     * Creates new form MainTwitterStreamerWindow
     */
    public MainTwitterStreamerWindow() throws ApiException {
        initComponents();
        setName(NbBundle.getMessage(MainTwitterStreamerWindow.class, "CTL_SimpleTopComponent"));
        setToolTipText(NbBundle.getMessage(MainTwitterStreamerWindow.class, "HINT_SimpleTopComponent"));
        streamer = Lookup.getDefault().lookup(TwitterStreamerV2.class);

        List<Networklogic> networks = new ArrayList((Collection<Networklogic>) Lookup.getDefault().lookupAll(Networklogic.class));
        Collections.sort(networks);
        DefaultComboBoxModel c = new DefaultComboBoxModel();
        for (Networklogic nl : networks) {
            c.addElement(nl);
        }
        this.comboboxNetworkLogic.setModel(c);

        refreshRules();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainScrollPane = new javax.swing.JScrollPane();
        mainPanel = new javax.swing.JPanel();
        labelCredentials = new javax.swing.JLabel();
        buttonCredentialShow = new javax.swing.JButton();
        labelDefineRules = new javax.swing.JLabel();
        labelOfficialDocumentation = new javax.swing.JLabel();
        panelRule = new javax.swing.JPanel();
        labelAddRuleTag = new javax.swing.JLabel();
        textFieldAddRuleTag = new javax.swing.JTextField();
        scrollPaneAddRuleValue = new javax.swing.JScrollPane();
        textAreaAddRuleValue = new javax.swing.JTextArea();
        buttonAddRule = new javax.swing.JButton();
        scrollPaneRuleList = new javax.swing.JScrollPane();
        tableRules = new javax.swing.JTable();
        buttonDeleteRule = new javax.swing.JButton();
        labelNetworkLogic = new javax.swing.JLabel();
        comboboxNetworkLogic = new javax.swing.JComboBox<>();
        checkboxSampleStream = new javax.swing.JCheckBox();
        toggleStartStopStream = new javax.swing.JToggleButton();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        setAutoscrolls(true);
        setMaximumSize(new java.awt.Dimension(200, 200));

        mainPanel.setMaximumSize(new java.awt.Dimension(100, 500));
        mainPanel.setPreferredSize(new java.awt.Dimension(100, 500));

        org.openide.awt.Mnemonics.setLocalizedText(labelCredentials, org.openide.util.NbBundle.getMessage(MainTwitterStreamerWindow.class, "MainTwitterStreamerWindow.labelCredentials.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(buttonCredentialShow, org.openide.util.NbBundle.getMessage(MainTwitterStreamerWindow.class, "MainTwitterStreamerWindow.buttonCredentialShow.text")); // NOI18N
        buttonCredentialShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCredentialShowActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(labelDefineRules, org.openide.util.NbBundle.getMessage(MainTwitterStreamerWindow.class, "MainTwitterStreamerWindow.labelDefineRules.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(labelOfficialDocumentation, org.openide.util.NbBundle.getMessage(MainTwitterStreamerWindow.class, "MainTwitterStreamerWindow.labelOfficialDocumentation.text")); // NOI18N
        labelOfficialDocumentation.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelOfficialDocumentation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelOfficialDocumentationMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(labelAddRuleTag, org.openide.util.NbBundle.getMessage(MainTwitterStreamerWindow.class, "MainTwitterStreamerWindow.labelAddRuleTag.text")); // NOI18N

        textFieldAddRuleTag.setText(org.openide.util.NbBundle.getMessage(MainTwitterStreamerWindow.class, "MainTwitterStreamerWindow.textFieldAddRuleTag.text")); // NOI18N

        scrollPaneAddRuleValue.setBorder(null);
        scrollPaneAddRuleValue.setViewportBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(MainTwitterStreamerWindow.class, "MainTwitterStreamerWindow.scrollPaneAddRuleValue.viewportBorder.title"))); // NOI18N

        textAreaAddRuleValue.setColumns(20);
        textAreaAddRuleValue.setRows(5);
        textAreaAddRuleValue.setBorder(null);
        scrollPaneAddRuleValue.setViewportView(textAreaAddRuleValue);

        org.openide.awt.Mnemonics.setLocalizedText(buttonAddRule, org.openide.util.NbBundle.getMessage(MainTwitterStreamerWindow.class, "MainTwitterStreamerWindow.buttonAddRule.text")); // NOI18N
        buttonAddRule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddRuleActionPerformed(evt);
            }
        });

        tableRules.setModel(new RuleTableModel());
        scrollPaneRuleList.setViewportView(tableRules);

        org.openide.awt.Mnemonics.setLocalizedText(buttonDeleteRule, org.openide.util.NbBundle.getMessage(MainTwitterStreamerWindow.class, "MainTwitterStreamerWindow.buttonDeleteRule.text")); // NOI18N
        buttonDeleteRule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteRuleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelRuleLayout = new javax.swing.GroupLayout(panelRule);
        panelRule.setLayout(panelRuleLayout);
        panelRuleLayout.setHorizontalGroup(
            panelRuleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRuleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRuleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelRuleLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(labelAddRuleTag))
                    .addGroup(panelRuleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(textFieldAddRuleTag, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(panelRuleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonDeleteRule)
                            .addComponent(buttonAddRule)
                            .addComponent(scrollPaneRuleList, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                            .addComponent(scrollPaneAddRuleValue))))
                .addContainerGap())
        );
        panelRuleLayout.setVerticalGroup(
            panelRuleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRuleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRuleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldAddRuleTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelAddRuleTag))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPaneAddRuleValue, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(buttonAddRule)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPaneRuleList, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonDeleteRule)
                .addContainerGap())
        );

        org.openide.awt.Mnemonics.setLocalizedText(labelNetworkLogic, org.openide.util.NbBundle.getMessage(MainTwitterStreamerWindow.class, "MainTwitterStreamerWindow.labelNetworkLogic.text")); // NOI18N

        comboboxNetworkLogic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboboxNetworkLogicActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(checkboxSampleStream, org.openide.util.NbBundle.getMessage(MainTwitterStreamerWindow.class, "MainTwitterStreamerWindow.checkboxSampleStream.text")); // NOI18N
        checkboxSampleStream.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxSampleStreamActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(toggleStartStopStream, org.openide.util.NbBundle.getMessage(MainTwitterStreamerWindow.class, "MainTwitterStreamerWindow.toggleStartStopStream.text")); // NOI18N
        toggleStartStopStream.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleStartStopStreamActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(labelCredentials, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonCredentialShow, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(labelDefineRules, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelOfficialDocumentation, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelNetworkLogic, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(checkboxSampleStream))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comboboxNetworkLogic, 0, 233, Short.MAX_VALUE)
                                    .addComponent(toggleStartStopStream, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap(41, Short.MAX_VALUE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(panelRule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelCredentials)
                    .addComponent(buttonCredentialShow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelOfficialDocumentation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelDefineRules))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelRule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboboxNetworkLogic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelNetworkLogic))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkboxSampleStream)
                    .addComponent(toggleStartStopStream))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        mainScrollPane.setViewportView(mainPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCredentialShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCredentialShowActionPerformed
        // TODO add your handling code here: TwitterCredentialDialog dg = new TwitterCredentialDialog(null, true);
        TwitterCredentialDialog dg = new TwitterCredentialDialog(null, true);
        dg.setCredentialProperty(streamer.getCredentialProperty());
        dg.setVisible(true);// TODO add your handling code here:
        if (dg.getReturnStatus() == TwitterCredentialDialog.RET_OK) {
            try {
                streamer.setCredentialProperty(dg.getCredentialProperty());
                streamer.saveCredentialProperty();
                refreshRules();
            } catch (ApiException ex) {
                Exceptions.printStackTrace(ex);
            }
        }

    }//GEN-LAST:event_buttonCredentialShowActionPerformed

    private void toggleStartStopStreamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleStartStopStreamActionPerformed
        try {
            if (toggleStartStopStream.isSelected()) {

                streamer.streamStart((Networklogic) this.comboboxNetworkLogic.getSelectedItem(), this.checkboxSampleStream.isSelected());
                toggleStartStopStream.setText("Stop");
            } else {
                streamer.streamStop();
                toggleStartStopStream.setText("Start");
                toggleStartStopStream.setSelected(false);
            }
        } catch (ApiException ex) {
            Exceptions.printStackTrace(ex);
            throw new RuntimeException(ex);
        }
    }//GEN-LAST:event_toggleStartStopStreamActionPerformed

    private void comboboxNetworkLogicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboboxNetworkLogicActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboboxNetworkLogicActionPerformed

    private void buttonDeleteRuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteRuleActionPerformed
        List<String> toDeleteIds = new ArrayList<>();
        try {
            if (this.tableRules.getSelectedRows().length > 0) {
                for (int idx : this.tableRules.getSelectedRows()) {
                    toDeleteIds.add(this.streamer.getRules().get(idx).getId());
                }

                this.streamer.deleteRule(toDeleteIds);
                refreshRules();
            }

        } catch (ApiException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_buttonDeleteRuleActionPerformed

    private void buttonAddRuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddRuleActionPerformed
        String tag = this.textFieldAddRuleTag.getText().trim();
        String value = this.textAreaAddRuleValue.getText().trim();
        try {
            if (!tag.isEmpty() && !value.isEmpty()) {
                this.streamer.addRule(tag, value);
                this.textFieldAddRuleTag.setText("");
                this.textAreaAddRuleValue.setText("");
                refreshRules();
            }
        } catch (ApiException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_buttonAddRuleActionPerformed

    private void labelOfficialDocumentationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelOfficialDocumentationMouseClicked
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI("https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/integrate/build-a-rule"));
            } catch (IOException | URISyntaxException e) {
                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, e);
            }
        } else {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, new Exception("Desktop method isn't supported"));
        }
    }//GEN-LAST:event_labelOfficialDocumentationMouseClicked

    private void checkboxSampleStreamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxSampleStreamActionPerformed
        if (this.checkboxSampleStream.isSelected()) {

            panelRule.setEnabled(false);
            tableRules.setEnabled(false);
            for (var component : panelRule.getComponents()) {
                component.setEnabled(false);
            }
        } else {
            panelRule.setEnabled(true);
            tableRules.setEnabled(true);
            for (var component : panelRule.getComponents()) {
                component.setEnabled(true);
            }

        }
    }//GEN-LAST:event_checkboxSampleStreamActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAddRule;
    private javax.swing.JButton buttonCredentialShow;
    private javax.swing.JButton buttonDeleteRule;
    private javax.swing.JCheckBox checkboxSampleStream;
    private javax.swing.JComboBox<String> comboboxNetworkLogic;
    private javax.swing.JLabel labelAddRuleTag;
    private javax.swing.JLabel labelCredentials;
    private javax.swing.JLabel labelDefineRules;
    private javax.swing.JLabel labelNetworkLogic;
    private javax.swing.JLabel labelOfficialDocumentation;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JScrollPane mainScrollPane;
    private javax.swing.JPanel panelRule;
    private javax.swing.JScrollPane scrollPaneAddRuleValue;
    private javax.swing.JScrollPane scrollPaneRuleList;
    private javax.swing.JTable tableRules;
    private javax.swing.JTextArea textAreaAddRuleValue;
    private javax.swing.JTextField textFieldAddRuleTag;
    private javax.swing.JToggleButton toggleStartStopStream;
    // End of variables declaration//GEN-END:variables
}
